%%
%To pull out data from excels generated by src/utils/get_data_for_stat_tests.py
% dir_to_search = 'C:\Users\shashank\Documents\vmsharefolder\program_analysis\reckless\src\experiments\results\raw_data_runs\';
% txtpattern = fullfile(dir_to_search, '*.xlsx');
% dinfo = dir(txtpattern);
% raw_data = {};
% for K = 1 : length(dinfo)
%     thisfilename = fullfile(dir_to_search, dinfo(K).name);  %just the name
%     [num,txt,raw] = xlsread(thisfilename); %load just this file
%     ar = cellfun(@str2num, txt(:,3:end));
%     raw_data{K} = ar;
% end
% here = 1;
%%
% %To look at whether the distribution of the runs are normally distributed
% %or not
% load 'C:\Users\shashank\Documents\vmsharefolder\program_analysis\reckless\src\utils\raw_data_experiments';
% m = size(raw_data);
% v = [];
% for idx = 1:m(2)
%     x = raw_data{1, idx};
%     sz = size(x);
%     for i = 1:max(x(:, 1))
%         for j = 2: sz(2)
%             y = x(x(:,1) == i,j);
%             [~, p] = kstat(y);
%             vv = [vv p];
%             figure;
%             hist(y)
%         end
%     end
%     pause;
%     close all;
% end
%%
% To calculate pair-wise tests for the different runs
experiments_to_calculate_for_last_two_runs = [];
experiments_to_calculate_for_all_runs = [];
load 'C:\Users\shashank\Documents\vmsharefolder\program_analysis\reckless\src\utils\raw_data_experiments';
m = size(raw_data);

stats = {};
arrs = [1, 7, 13, 19, 21];
n_means = {};
all_friedman_input = {};
for kk = 1:length(arrs)-1
    friedman_input = [];
    for i = arrs(kk):arrs(kk+1)-1
        r = raw_data{1,i};
        col = [];
        for j = 1:max(r(:,1))+1
            col = [col r(r(:,1) == j-1, 5)];
        end
        friedman_input = [friedman_input; col];
    end
    %[p1 p2 p3] = friedman(friedman_input, 60, 'off');
    all_friedman_input{kk} = friedman_input;
    sz = size(friedman_input, 1)/60;
    friedman_input_medians = [];
    for i = 1:sz
        friedman_input_medians = [friedman_input_medians; median(friedman_input(((i-1)*60+1):(i)*60,:))];
    end
    [p1 p2 p3] = friedman(friedman_input_medians, 1, 'off');
    stats{kk} = p3;
    n_means{kk} = [p3.n p3.meanranks];
    %n_means = [n_means; [p3.n p3.meanranks]];
end
multcompare(p3, 'CType', 'bonferroni');